#Performance overlay. Replace "X" with whatever you want from the list below and uncomment the line "dxvk.hud = X".
#devinfo – Shows device info (GPU name, driver version).
#fps – Displays the current frames per second.
#frametimes – Shows a graph of frame times (useful for spotting stutters).
#latency = Input latency. Only works with modern Nvidia GPUs supporting Reflex.
#pipelines – Number of graphics pipelines created; helps track on-the-fly shader compilation.
#drawcalls – Number of draw calls per frame.
#submissions – Number of command buffer submissions per frame.
#gpuload – Estimated GPU usage (not always perfectly accurate).
#compiler – Shows activity of the async pipeline compiler (useful for async builds).
#version – Displays the DXVK version.
#all - Displays all options at the same time.
#dxvk.hud = all

#Enables asynchronous (background) shader/pipeline compilation. Intended to reduce stutters from “just-in-time” pipeline creation.
#Enabled by default since DXVK-GPLAsync 2.6-1!
#dxvk.gplAsyncCache = True

#Caps the game’s framerate at X FPS. Useful if you prefer stable frametimes.
dxgi.maxFrameRate = 144

#Allows the CPU to queue up to X frames before the GPU renders them. Higher frame latency can slightly increase average FPS.
dxgi.maxFrameLatency = 2

#Reports the correct amount of VRAM in MB to the game. Just ensures stable texture allocation. Most GPUs shoudl already report the right amount.
#dxgi.maxDeviceMemory = 16384

#Disables VSync. Reduces any VSync-induced input delay.
dxgi.syncInterval = 0

#Does a “lighter” version of barrier-skipping.
#It’s less risky but might yield slightly lower performance gains than outright ignoring them ("d3d11.ignoreGraphicsBarriers = True").
#Same performance on RDNA 2, a little safer.
#Only use "d3d11.ignoreGraphicsBarriers" OR "d3d11.relaxedBarriers".
d3d11.relaxedBarriers = True

#Skips certain “barriers” (synchronization points) in the GPU pipeline after Unordered Access View writes.
#Potentially improves GPU throughput by reducing forced waits.
#Only use "d3d11.ignoreGraphicsBarriers" OR "d3d11.relaxedBarriers".
#d3d11.ignoreGraphicsBarriers = True


#Place selected option in CPU cache.
#Options:
#v: Vertex buffers, Usually less beneficial unless the CPU specifically updates vertex data each frame.
#i: Index buffers, Usually less beneficial unless the CPU specifically updates index data each frame.
#c: Constant buffers, If you only want to speed up constant buffer updates, the most common dynamic buffer scenario.
#r: Shader resources (raw or structured buffers), If you suspect the game updates shader resources often on the CPU side (less common in typical rendering, more common in certain GPU compute tasks).
#a: All dynamic resources (combination of v, i, c, r), Covers all dynamic resources. Great if you know your engine does a lot of CPU-side updates. Sometimes the easiest “catch-all.”
d3d11.cachedDynamicResources = "a"

#Tells DXVK how many CPU cores to use for shader/pipeline compilation. (0 = no limit, use all)
#Set to 0 on Intel hybrid CPUs the OS no longer parks compiler threads on E-cores by mistake.
dxvk.numCompilerThreads = 0

#Uses raw storage buffers instead of older “structured buffer views.”
#Good for AMD GPUs, which often work more efficiently with 4-byte alignment.
dxvk.useRawSsbo = True

#Uses Vulkan’s pipeline library feature if your driver supports it.
#Potentially reuses partial pipelines for less stutter.
dxvk.enableGraphicsPipelineLibrary = Auto

#Lets DXVK bypass the DWM UI compositor. On some systems that trims a few ms of latency and fixes HDR->SDR tone-mapping stutter. Off by default.
#Worth trying if you run GW2 in true full-screen and see occasional compositor spikes.
#dxvk.allowFse = True

#GW2’s asset streaming is bursty; defrag can stop VRAM “holes” that lead to paging.
#Experiment with it and watch for artifacts during rapid map loads. Revert if you see any.
#If you notice flashes or hitching, set it to Auto or comment out.
dxvk.enableMemoryDefrag = True
